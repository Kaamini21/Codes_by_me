# -*- coding: utf-8 -*-
"""project_ann.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11VB0lLVttkytV0SK9Eu9C-s9KKXAc_F2

LSTM

### Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import sklearn

"""###  Importing the training and testing set."""

dataset_test = pd.read_csv('/content/cu_test.csv')
test = dataset_test.sample(frac=1)
print(test)
dataset_train = pd.read_csv('/content/cu_Train.csv')
df = dataset_train.sample(frac=1)
print(df)

"""###  Reshaping and filtering dat."""



test_set = test.iloc[:, 3].values
test.info()
test_set.shape

training_set = df.iloc[:, 3:].values
df.info()
training_set.shape

"""### Feature Scaling"""

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0, 1))
training_set_scaled = sc.fit_transform(training_set)
training_set_scaled.shape

test_set_reshaped = np.array(test_set).reshape(-1, 1)
fc = MinMaxScaler(feature_range = (0, 1))
test_set_scaled = fc.fit_transform(test_set_reshaped)
test_set_scaled.shape

"""### Creating a data structure with 60 timesteps and 1 output. This is to retain the memory of previous 
values in predicting new values to capturing the continuous pattern in a spatial data.
"""

X_train = []
y_train = []
for i in range(60, 4566):
    X_train.append(training_set_scaled[i-60:i, 0])
    y_train.append(training_set_scaled[i, 1])
X_train, y_train = np.array(X_train), np.array(y_train)
X_train.shape

#y_train.shape
#len(y_train)
#len(X_train)

X_test = []
for i in range(60, 1986):
    X_test.append(test_set_scaled[i-60:i, 0])
Y_test = np.array(X_test)
Y_test.shape

"""For each financial day, X_train will contain 60 previous stock prices and y_train contain stock price next financial day. In X_train, we are going to append 60 stock prices before ith financial day, and 0 is the column of index in training_set_scaled array.
Later X_train and y_train are made numpy array as that can be accepted as RNN

### Reshaping
"""

trainifyx = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
trainifyx.shape
#X_train.shape[1]
#X_train.shape[0]

testingy = np.reshape(Y_test, (Y_test.shape[0], Y_test.shape[1], 1))
testingy.shape

"""## Part 2 - Building and Training the RNN

### Importing the Keras libraries and packages
"""

!pip install tensorflow

import tensorflow as tf
from tensorflow import keras

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout
from keras import regularizers
from tensorflow.keras.callbacks import EarlyStopping

early_stopping = EarlyStopping(monitor='loss', patience=4)

"""### Initialising the RNN"""

regressor = Sequential()
# regressor is an object of squential class and
#represents a sequeance of layers

"""### Adding the first LSTM layer and some Dropout regularisation"""

regressor.add(LSTM(units = 32, return_sequences = True, input_shape = (X_train.shape[1], 1), kernel_regularizer = regularizers.l2(0.01)))
regressor.add(Dropout(0.3))

"""### Adding the output layer"""



regressor.add(Dense(units = 1))

"""### Compiling the RNN"""

learning_rate = 0.0001

optimizer = tf.keras.optimizers.Adam(learning_rate = learning_rate)
regressor.compile(optimizer = optimizer, loss = 'mean_squared_error')

"""### Fitting the RNN to the Training set"""

regressor.fit(trainifyx, y_train, epochs = 20 , batch_size = 32, callbacks= [early_stopping])


"""###  Predicting Cu deposit from training, testing data"""

train_predict = regressor.predict(trainifyx)

test_predict = regressor.predict(testingy)

train_predict

"""### Reshaping and saving predictions in csv  """


train_pre = np.reshape(train_predict, (4506, 60))
test_pre = np.reshape(test_predict, (1926, 60))
rup = train_pre[:, 0]
yes = test_pre[:, 0]

you = train_pre[4505, :]
we= you.reshape(60,1)
output = np.append(rup, we)

yes2 = test_pre[1925, :]
vee = yes2.reshape(60,1)
outtest = np.append(yes, vee)

outtest.shape

df = pd.DataFrame(output)
df.to_csv('output2.csv', index=False)
testt = pd.DataFrame(outtest)
testt.to_csv('testout2.csv', index=False)

"""### Visualizing data as a plot  """

plt.plot(output, color = 'red', label = 'training')
plt.plot(outtest, color = 'blue', label = 'test')
#plt.title('')
#plt.xlabel('')
#plt.ylabel('')
#plt.legend()
plt.show()







